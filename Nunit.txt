Nunit is a unit testing framework for all .Net languages.Initially ported from Junit.
It is written entirely in C# and has been completely redesigned to take advantage of many .NET language features for example custom attributes and other reflection related capabilities.

1-writing test method using Nunit.
Created three separate methods for Initialising, Executing a test(can have many tests) and Clean up method.
 class Program
    {
       
        //create reference for the browser and set it as a global variable
        IWebDriver driver = new ChromeDriver();

        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
            
        }

        [SetUp]
        public void Initialize()
        {
            //navigate to Google Page
            driver.Navigate().GoToUrl("https://www.google.com");

            //maximize window
            driver.Manage().Window.Maximize();

            Console.WriteLine("Opened URL");

        }

        [Test]
        public void ExecuteTest()
        {
            //Find the search text Box element
            IWebElement element = driver.FindElement(By.Name("q"));

            //perform ops by sending value to the text box
            element.SendKeys("execute automation");

            Console.WriteLine("Executed Test");

        }

        [Test]
        public void NextTest()
        {
            Console.WriteLine("Executing next Test method");
        }

        [TearDown]
        public void CleanUp()
        {
            //close window
            driver.Close();

            Console.WriteLine("Closed the browser");

        }
    }
}


2-Creating custom methods for Selenium.
Creating custom method of controls to \\set\\ values into the control like Text box, Drop Down box, Check box etc.

Part-1  Video-5
Instead of looking for an element in DOM(web Page) through Selenium WebDriver.Find Element method we will create a custom method in a separate class called SeleniumSetMethods.cs.
Example:EnterText(element,value,type)

Part-2 Video-6
Create Custom methods of controls to \\Get\\ the values into the control like Text Box, Drop down box and Check box etc.

Video-7
Refactoring Custom methods for control libraries.
Objective 
Reduce parameters supplied to the Custom methods.
Use Strongly typed parameters.
Make the method more reusable.

Procedure
Refactoring in the video  reduced  the parameters supplied to the methods in the Set and Get classes.
We created a separate class called Properties collection class and created a reference for the chrome browser. We then removed the IWebDriver parameter in all the methods in each class.
The element type parameter was made as a strongly typed value.
We created a enum in the same Properties collection class referring the PropertyType.value like 
        Id,
        Name,
        LinkText,
        CssName,
        ClassName 
By refactoring the custom methods(in the Set and Get methods)they are more reusable since they can be called anywhere anytime.

Video-8
Working with Page Object model in Selenium C#.
POM
POM is a design pattern where Object identification is in a separate class and operation in a separate class files.

We create a separate class called EAPageObject.cs where each element is defined as property. 
The objects are called in test methods where the page is instantiated into an object and some operations are performed on its properties.

EAPageObject page = new EAPageObject();
page.txtInitial.SendKeys("executeautomation");
page.btnSave.Click();
The Custom methods in the Program.cs is totally replaced by few lines of code.

Video-9
Page Navigation in POM.

Objective
To have inbuilt methods in separate Page Objects and use this instead of the custom Methods that we created in Video-5&6.

Step-1Created a separate class called LoginPageObject.cs to include properties of the login page. Initialized the login page using a constructor.

Step-2Include the FirstName and MiddleName properties of the page model in EAPageObject.cs file.
Added the login operation as a method inside the LoginPageObject.cs file rather than having it in Program.cs [Test] attribute. Made the Login method as a non-void one to return the EAPageObject so that we can navigate to the EA PAge once we login.

Step-3
The LoginPageObject has the Login method in it and returns a EAPageObject once the login is successful.
Once we return the EAPageObject it will initialize all the page objects and return the instance of the EA page from the login itself. 

Step-4
Created a separate method in EAPageObject.cs called FillUserForm which gets called in the Program.cs [Test] 
Modified Program.cs to make a call to EAPageObject.FillUserForm to enter all values of the text boxes.

Issues
PageFactory no longer works. Fixed both EAPageObject and LoginPageObject class files to include [Obsolete] attribute instead.
Refer this video for more documentation
Selenium with C# Breaking Changes - PageFactory class will be deprecated in future release.
https://www.youtube.com/watch?v=jgKgbVcQ-1U

Video-10 Customising Custom Library methods.
Change the parameters supplied to the Custom Set and Get methods to delete the string element and string elementtype as these two values are already in the POM(EAPageObject.cs).
These custom methods are now supplied with IWebElement element and string values as the only parameters to set and get the values in these methods. 
After getting or setting these values we can directly call these custom methods from the EAPageObject FillUserForm method.

